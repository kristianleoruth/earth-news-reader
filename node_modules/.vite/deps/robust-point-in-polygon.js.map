{
  "version": 3,
  "sources": ["../../two-product/two-product.js", "../../robust-sum/robust-sum.js", "../../two-sum/two-sum.js", "../../robust-scale/robust-scale.js", "../../robust-subtract/robust-diff.js", "../../robust-orientation/orientation.js", "../../robust-point-in-polygon/robust-pnp.js"],
  "sourcesContent": ["\"use strict\"\n\nmodule.exports = twoProduct\n\nvar SPLITTER = +(Math.pow(2, 27) + 1.0)\n\nfunction twoProduct(a, b, result) {\n  var x = a * b\n\n  var c = SPLITTER * a\n  var abig = c - a\n  var ahi = c - abig\n  var alo = a - ahi\n\n  var d = SPLITTER * b\n  var bbig = d - b\n  var bhi = d - bbig\n  var blo = b - bhi\n\n  var err1 = x - (ahi * bhi)\n  var err2 = err1 - (alo * bhi)\n  var err3 = err2 - (ahi * blo)\n\n  var y = alo * blo - err3\n\n  if(result) {\n    result[0] = y\n    result[1] = x\n    return result\n  }\n\n  return [ y, x ]\n}", "\"use strict\"\n\nmodule.exports = linearExpansionSum\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction linearExpansionSum(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}", "\"use strict\"\n\nmodule.exports = fastTwoSum\n\nfunction fastTwoSum(a, b, result) {\n\tvar x = a + b\n\tvar bv = x - a\n\tvar av = x - bv\n\tvar br = b - bv\n\tvar ar = a - av\n\tif(result) {\n\t\tresult[0] = ar + br\n\t\tresult[1] = x\n\t\treturn result\n\t}\n\treturn [ar+br, x]\n}", "\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar twoSum = require(\"two-sum\")\n\nmodule.exports = scaleLinearExpansion\n\nfunction scaleLinearExpansion(e, scale) {\n  var n = e.length\n  if(n === 1) {\n    var ts = twoProduct(e[0], scale)\n    if(ts[0]) {\n      return ts\n    }\n    return [ ts[1] ]\n  }\n  var g = new Array(2 * n)\n  var q = [0.1, 0.1]\n  var t = [0.1, 0.1]\n  var count = 0\n  twoProduct(e[0], scale, q)\n  if(q[0]) {\n    g[count++] = q[0]\n  }\n  for(var i=1; i<n; ++i) {\n    twoProduct(e[i], scale, t)\n    var pq = q[1]\n    twoSum(pq, t[0], q)\n    if(q[0]) {\n      g[count++] = q[0]\n    }\n    var a = t[1]\n    var b = q[1]\n    var x = a + b\n    var bv = x - a\n    var y = b - bv\n    q[1] = x\n    if(y) {\n      g[count++] = y\n    }\n  }\n  if(q[1]) {\n    g[count++] = q[1]\n  }\n  if(count === 0) {\n    g[count++] = 0.0\n  }\n  g.length = count\n  return g\n}", "\"use strict\"\n\nmodule.exports = robustSubtract\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction robustSubtract(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], -f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = -f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = -f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}", "\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar robustSum = require(\"robust-sum\")\nvar robustScale = require(\"robust-scale\")\nvar robustSubtract = require(\"robust-subtract\")\n\nvar NUM_EXPAND = 5\n\nvar EPSILON     = 1.1102230246251565e-16\nvar ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON\nvar ERRBOUND4   = (7.0 + 56.0 * EPSILON) * EPSILON\n\nfunction orientation_3(sum, prod, scale, sub) {\n  return function orientation3Exact(m0, m1, m2) {\n    var p = sum(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])))\n    var n = sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0]))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation_4(sum, prod, scale, sub) {\n  return function orientation4Exact(m0, m1, m2, m3) {\n    var p = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))))\n    var n = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation_5(sum, prod, scale, sub) {\n  return function orientation5Exact(m0, m1, m2, m3, m4) {\n    var p = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m1[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), -m2[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m3[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), -m4[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m1[3])))), sum(sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m3[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), -m4[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), m0[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m1[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m3[3])))))\n    var n = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m2[3])), sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), m3[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m4[3]))), sum(sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), -m1[3])), sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m4[3]))))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation(n) {\n  var fn =\n    n === 3 ? orientation_3 :\n    n === 4 ? orientation_4 : orientation_5\n\n  return fn(robustSum, twoProduct, robustScale, robustSubtract)\n}\n\nvar orientation3Exact = orientation(3)\nvar orientation4Exact = orientation(4)\n\nvar CACHED = [\n  function orientation0() { return 0 },\n  function orientation1() { return 0 },\n  function orientation2(a, b) {\n    return b[0] - a[0]\n  },\n  function orientation3(a, b, c) {\n    var l = (a[1] - c[1]) * (b[0] - c[0])\n    var r = (a[0] - c[0]) * (b[1] - c[1])\n    var det = l - r\n    var s\n    if(l > 0) {\n      if(r <= 0) {\n        return det\n      } else {\n        s = l + r\n      }\n    } else if(l < 0) {\n      if(r >= 0) {\n        return det\n      } else {\n        s = -(l + r)\n      }\n    } else {\n      return det\n    }\n    var tol = ERRBOUND3 * s\n    if(det >= tol || det <= -tol) {\n      return det\n    }\n    return orientation3Exact(a, b, c)\n  },\n  function orientation4(a,b,c,d) {\n    var adx = a[0] - d[0]\n    var bdx = b[0] - d[0]\n    var cdx = c[0] - d[0]\n    var ady = a[1] - d[1]\n    var bdy = b[1] - d[1]\n    var cdy = c[1] - d[1]\n    var adz = a[2] - d[2]\n    var bdz = b[2] - d[2]\n    var cdz = c[2] - d[2]\n    var bdxcdy = bdx * cdy\n    var cdxbdy = cdx * bdy\n    var cdxady = cdx * ady\n    var adxcdy = adx * cdy\n    var adxbdy = adx * bdy\n    var bdxady = bdx * ady\n    var det = adz * (bdxcdy - cdxbdy)\n            + bdz * (cdxady - adxcdy)\n            + cdz * (adxbdy - bdxady)\n    var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz)\n                  + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz)\n                  + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz)\n    var tol = ERRBOUND4 * permanent\n    if ((det > tol) || (-det > tol)) {\n      return det\n    }\n    return orientation4Exact(a,b,c,d)\n  }\n]\n\nfunction slowOrient(args) {\n  var proc = CACHED[args.length]\n  if(!proc) {\n    proc = CACHED[args.length] = orientation(args.length)\n  }\n  return proc.apply(undefined, args)\n}\n\nfunction proc (slow, o0, o1, o2, o3, o4, o5) {\n  return function getOrientation(a0, a1, a2, a3, a4) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return 0;\n      case 2:\n        return o2(a0, a1)\n      case 3:\n        return o3(a0, a1, a2)\n      case 4:\n        return o4(a0, a1, a2, a3)\n      case 5:\n        return o5(a0, a1, a2, a3, a4)\n    }\n\n    var s = new Array(arguments.length)\n    for (var i = 0; i < arguments.length; ++i) {\n      s[i] = arguments[i]\n    }\n    return slow(s)\n  }\n}\n\nfunction generateOrientationProc() {\n  while(CACHED.length <= NUM_EXPAND) {\n    CACHED.push(orientation(CACHED.length))\n  }\n  module.exports = proc.apply(undefined, [slowOrient].concat(CACHED))\n  for(var i=0; i<=NUM_EXPAND; ++i) {\n    module.exports[i] = CACHED[i]\n  }\n}\n\ngenerateOrientationProc()", "module.exports = robustPointInPolygon\n\nvar orient = require('robust-orientation')\n\nfunction robustPointInPolygon(vs, point) {\n  var x = point[0]\n  var y = point[1]\n  var n = vs.length\n  var inside = 1\n  var lim = n\n  for(var i = 0, j = n-1; i<lim; j=i++) {\n    var a = vs[i]\n    var b = vs[j]\n    var yi = a[1]\n    var yj = b[1]\n    if(yj < yi) {\n      if(yj < y && y < yi) {\n        var s = orient(a, b, point)\n        if(s === 0) {\n          return 0\n        } else {\n          inside ^= (0 < s)|0\n        }\n      } else if(y === yi) {\n        var c = vs[(i+1)%n]\n        var yk = c[1]\n        if(yi < yk) {\n          var s = orient(a, b, point)\n          if(s === 0) {\n            return 0\n          } else {\n            inside ^= (0 < s)|0\n          }\n        }\n      }\n    } else if(yi < yj) {\n      if(yi < y && y < yj) {\n        var s = orient(a, b, point)\n        if(s === 0) {\n          return 0\n        } else {\n          inside ^= (s < 0)|0\n        }\n      } else if(y === yi) {\n        var c = vs[(i+1)%n]\n        var yk = c[1]\n        if(yk < yi) {\n          var s = orient(a, b, point)\n          if(s === 0) {\n            return 0\n          } else {\n            inside ^= (s < 0)|0\n          }\n        }\n      }\n    } else if(y === yi) {\n      var x0 = Math.min(a[0], b[0])\n      var x1 = Math.max(a[0], b[0])\n      if(i === 0) {\n        while(j>0) {\n          var k = (j+n-1)%n\n          var p = vs[k]\n          if(p[1] !== y) {\n            break\n          }\n          var px = p[0]\n          x0 = Math.min(x0, px)\n          x1 = Math.max(x1, px)\n          j = k\n        }\n        if(j === 0) {\n          if(x0 <= x && x <= x1) {\n            return 0\n          }\n          return 1 \n        }\n        lim = j+1\n      }\n      var y0 = vs[(j+n-1)%n][1]\n      while(i+1<lim) {\n        var p = vs[i+1]\n        if(p[1] !== y) {\n          break\n        }\n        var px = p[0]\n        x0 = Math.min(x0, px)\n        x1 = Math.max(x1, px)\n        i += 1\n      }\n      if(x0 <= x && x <= x1) {\n        return 0\n      }\n      var y1 = vs[(i+1)%n][1]\n      if(x < x0 && (y0 < y !== y1 < y)) {\n        inside ^= 1\n      }\n    }\n  }\n  return 2 * inside - 1\n}"],
  "mappings": "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CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC99E,YAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAA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",
  "names": ["orientation3Exact", "orientation4Exact", "proc"]
}
